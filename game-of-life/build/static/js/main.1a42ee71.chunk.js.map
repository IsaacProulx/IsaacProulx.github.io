{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["window","addEventListener","Cell","props","draggable","onMouseDown","down","click","onMouseOver","event","mouse","add","x","y","remove","className","alive","style","col","row","Grid","useState","setMouse","handleMouseDownAlive","handleMouseDownDead","g","cells","push","addCell","removeCell","onMouseUp","App","26","16","27","17","28","15","setCells","speed","setSpeed","paused","setPaused","forceUpdate","value","setValue","useForceUpdate","nextOrgGen","useCallback","getSurroundingCoords","parseInt","getSurroundingAlive","pair","newCells","useEffect","interval","setInterval","clearInterval","addOrgCell","JSON","stringify","exportCells","filename","text","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","removeChild","download","onClick","Math","floor","parseFloat","prompt","id","input","type","onchange","e","file","target","files","reader","FileReader","readAsText","onload","readerEvent","content","result","parse","alert","importCells","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6OAGAA,OAAOC,iBAAiB,aAAY,eAIpCD,OAAOC,iBAAiB,WAAU,eAIlC,IAAMC,EAAO,SAACC,GAQZ,OACE,qBAAKC,UAAU,QAAQC,YAAa,WAAKF,EAAMG,OAAOH,EAAMI,SAAUC,YAAa,SAAAC,GAPlE,IAAdN,EAAMO,MACPP,EAAMQ,IAAIR,EAAMS,EAAET,EAAMU,GACH,IAAdV,EAAMO,OACbP,EAAMW,OAAOX,EAAMS,EAAET,EAAMU,IAIuFE,UAAS,eAAUZ,EAAMa,OAASC,MAAO,CAAC,WAAad,EAAMe,IAAK,QAAUf,EAAMgB,QAIpMC,EAAO,SAACjB,GAqBZ,IArBuB,IAAD,EACIkB,mBAAS,GADb,mBACfX,EADe,KACRY,EADQ,KAGhBC,EAAuB,SAAAd,GAE3Ba,EAAS,IAGLE,EAAsB,SAAAf,GAE1Ba,EAAS,IAUPG,EAAI,GApBc,WAqBdb,GACN,IAtBoB,eAsBZC,GACHV,EAAMuB,MAAed,EAAE,EALhB,IAKqBT,EAAMuB,MAAed,EAAE,EAL5C,GAKyDC,EAAE,EAJ3D,GAKRY,EAAEE,KAAK,cAAC,EAAD,CAAwBf,EAAYA,EAAE,EANrC,EAMyCC,EAAYA,EAAE,EALvD,EAK2DP,KAAMiB,EAAsBZ,IAAKR,EAAMyB,QAASd,OAAQX,EAAM0B,WAAYnB,MAAOA,EAAOS,IAAKN,EAAGK,IAAKN,EAAGI,MAAO,QAAST,MAAO,kBAAMJ,EAAMI,MAAeK,EAAE,EANvN,EAMmOC,EAAE,EALrO,EAKwO,WAAzO,UAAcD,EAAd,YAAmBC,KAE1BY,EAAEE,KAAK,cAAC,EAAD,CAAwBf,EAAYA,EAAE,EARrC,EAQyCC,EAAYA,EAAE,EAPvD,EAO2DP,KAAMkB,EAAqBb,IAAKR,EAAMyB,QAASd,OAAQX,EAAM0B,WAAYnB,MAAOA,EAAOS,IAAKN,EAAGK,IAAKN,EAAGI,MAAO,OAAQT,MAAO,kBAAMJ,EAAMI,MAAeK,EAAE,EARrN,EAQiOC,EAAE,EAPnO,EAOsO,UAAvO,UAAcD,EAAd,YAAmBC,MAJtBA,EAAE,EAAGA,EAAE,GAAIA,IAAK,EAAhBA,IADFD,EAAE,EAAGA,EAAE,GAAIA,IAAK,EAAhBA,GAUR,OACE,qBAAKG,UAAU,OAAOX,UAAU,QAAQ0B,UAAW,SAAArB,GAjBnDa,EAAS,IAiBT,SACGG,KAmKQM,MA5If,WAAgB,IAAD,EACaV,mBAAS,CACjCW,GAAG,CAACC,GAAG,GACPC,GAAG,CAACC,GAAG,GACPC,GAAG,CAACC,GAAG,EAAEJ,GAAG,EAAEE,GAAG,KAJN,mBACNT,EADM,KACCY,EADD,OAMajB,mBAAS,KANtB,mBAMNkB,EANM,KAMCC,EAND,OAOenB,oBAAS,GAPxB,mBAONoB,EAPM,KAOEC,EAPF,KASPC,EAdR,WAA0B,IAAD,EACGtB,mBAAS,GADZ,mBAChBuB,EADgB,KACTC,EADS,KAEvB,OAAO,kBAAMA,EAASD,EAAQ,IAYVE,GAEdC,EAAaC,uBAAY,WAC3B,SAASC,EAAqBrC,EAAEC,GAG9B,MAAO,CACH,CAAC,GAHLD,EAAIsC,SAAStC,IAGF,EAAE,GAFbC,EAAIqC,SAASrC,IAEM,GACf,CAAC,EAAID,EAAE,EAAE,EAAIC,GACb,CAAC,EAAID,EAAE,EAAE,EAAIC,EAAE,GACf,CAAC,EAAID,EAAE,EAAIC,EAAE,GACb,CAAC,EAAID,EAAE,EAAIC,EAAE,GACb,CAAC,EAAID,EAAE,EAAE,EAAIC,EAAE,GACf,CAAC,EAAID,EAAE,EAAE,EAAIC,GACb,CAAC,EAAID,EAAE,EAAE,EAAIC,EAAE,IAIrB,SAASsC,EAAoBvC,EAAEC,GAC3B,IAD6B,EACzBG,EAAQ,EADiB,cAEbiC,EAAqBrC,EAAEC,IAFV,IAE7B,IAAI,EAAJ,qBAA0C,CAAC,IAAnCuC,EAAkC,QACnC1B,EAAM0B,EAAI,IAAsC,IAA9B1B,EAAM0B,EAAI,GAAOA,EAAI,IAAYpC,KAH7B,8BAK7B,OAAOA,EAGX,IAAIqC,EAAW,GACf,IAAI,IAAIzC,KAAKc,EACT,IAAI,IAAIb,KAAKa,EAAMd,GAAG,CAClB,IAAII,EAAQmC,EAAoBvC,EAAEC,GACvB,IAARG,GAAmB,IAARA,IACVqC,EAASzC,GAAKyC,EAASzC,IAAI,GAC3ByC,EAASzC,GAAGC,GAAK,GAJH,oBAMFoC,EAAqBrC,EAAEC,IANrB,IAMlB,IAAI,EAAJ,qBAA0C,CAAC,IAAnCuC,EAAkC,QACQ,IAA3CD,EAAoBC,EAAI,EAAMA,EAAI,KACjCC,EAASD,EAAI,GAASC,EAASD,EAAI,IAAQ,GAC3CC,EAASD,EAAI,GAAOA,EAAI,GAAS,IATvB,+BAe1Bd,EAASe,KAEX,CAAC3B,IAEH4B,qBAAU,WACR,IAAIb,EAAO,CACT,IAAMc,EAAWC,aAAY,WAC3BT,MACCR,GACH,OAAO,kBAAMkB,cAAcF,OAG5B,CAACR,EAAWR,EAAME,IAErB,IAAMiB,EAAa,SAAC9C,EAAEC,GAClB,IAAIwC,EAAW3B,EACf2B,EAASzC,GAAGyC,EAASzC,IAAI,GACzByC,EAASzC,GAAGC,GAAK,EACjByB,EAASe,GACTV,KAGEd,EAAa,SAACjB,EAAEC,GACpB,IAAIwC,EAAW3B,EACZ2B,EAASzC,IAAIyC,EAASzC,GAAGC,YACnBwC,EAASzC,GAAGC,GACc,OAA9B8C,KAAKC,UAAUP,EAASzC,YAAmByC,EAASzC,GACvD0B,EAASe,IAEXV,KAoBIkB,EAAc,YAvHtB,SAAkBC,EAAUC,GAC1B,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQ/C,MAAMoD,QAAU,OACxBJ,SAASK,KAAKC,YAAYP,GAE1BA,EAAQzD,QAER0D,SAASK,KAAKE,YAAYR,GA8GxBS,CAAS,YAAYd,KAAKC,UAAUlC,KAuBtC,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CAAMW,MAAOA,EAAOE,QAAS8B,EAAY7B,WAAYA,EAAYtB,MA3C7C,SAACK,EAAEC,EAAEG,GAChB,UAARA,EACDa,EAAWjB,EAAEC,GAEb6C,EAAW9C,EAAEC,MAwCb,yBAAQ6D,QAAS,WA9BnBhC,GAAWD,IA8BT,UAA4CA,EAAO,MAAM,IAAzD,UACA,wBAAQiC,QAAS,kBAAM3B,KAAvB,kBACA,wBAAQ2B,QAAS,WArCnBlC,EAASmC,KAAKC,MAAMC,WAAWC,OAAO,kCAqCOC,GAAI,cAA/C,uBACA,wBAAQL,QAAS,kBAAMpC,EAAS,KAAhC,mBACA,wBAAQoC,QAAS,kBAAMb,KAAvB,yBACA,wBAAQa,QAAS,kBA5BD,WAClB,IAAIM,EAAQf,SAASC,cAAc,SACnCc,EAAMC,KAAO,OACbD,EAAME,SAAW,SAAAC,GACf,IAAIC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACjBD,EAAOE,WAAWL,EAAK,SACvBG,EAAOG,OAAS,SAAAC,GACd,IAAIC,EAAUD,EAAYN,OAAOQ,OACjC,IACElC,KAAKmC,MAAMF,GACXtD,EAASqB,KAAKmC,MAAMF,IACrB,SACCG,MAAM,8BAIZf,EAAMzE,QAWmByF,IAAvB,yBACA,wBAAQtB,QAAS,kBAAMuB,QAAQC,IAAIxE,IAAnC,2BC1MSyE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAAS8C,eAAe,SAM1BZ,M","file":"static/js/main.1a42ee71.chunk.js","sourcesContent":["import './App.css';\nimport React, {useCallback, useEffect, useState} from 'react';\n\nwindow.addEventListener(\"mousedown\",function(){\n  //alert(\"down\");\n});\n\nwindow.addEventListener(\"mouseup\",function(){\n  //alert(\"up\");\n})\n\nconst Cell = (props) => {\n  const handleMouseOver = event => {\n    if(props.mouse===1){\n      props.add(props.x,props.y)\n    }else if(props.mouse===2){\n      props.remove(props.x,props.y)\n    }\n  }\n  return (\n    <div draggable=\"false\" onMouseDown={()=>{props.down();props.click()}} onMouseOver={event => handleMouseOver(event)} className={`cell ${props.alive}`} style={{\"gridColumn\":props.col, \"gridRow\":props.row}} ></div>\n  );\n}\n\nconst Grid = (props) => {\n  const [mouse, setMouse] = useState(0); //0 is up, 1 is down on dead, 2 is down on live\n\n  const handleMouseDownAlive = event => {\n    //console.log(\"down\")\n    setMouse(2);\n  }\n\n  const handleMouseDownDead = event => {\n    //console.log(\"down\")\n    setMouse(1);\n  }\n\n  const handleMouseUp = event => {\n    //console.log(\"up\")\n    setMouse(0);\n  }\n\n  let actualX = 0;\n  let actualY = 0;\n  let g = [];\n  for(let x=1; x<74; x++){\n    for(let y=1; y<36; y++){\n      if(props.cells[actualX+(x-1)]&&props.cells[actualX+(x-1)][actualY+(y-1)]){\n        g.push(<Cell key={`${x},${y}`} x={actualX+(x-1)} y={actualY+(y-1)} down={handleMouseDownAlive} add={props.addCell} remove={props.removeCell} mouse={mouse} row={y} col={x} alive={\"alive\"} click={() => props.click(actualX+(x-1),actualY+(y-1),\"alive\")} />)\n      }else{\n        g.push(<Cell key={`${x},${y}`} x={actualX+(x-1)} y={actualY+(y-1)} down={handleMouseDownDead} add={props.addCell} remove={props.removeCell} mouse={mouse} row={y} col={x} alive={\"dead\"} click={() => props.click(actualX+(x-1),actualY+(y-1),\"dead\")} />)\n      }\n    }  \n  }\n\n  return (\n    <div className=\"grid\" draggable=\"false\" onMouseUp={event => handleMouseUp(event)}>\n      {g}\n    </div>\n  );\n}\n\nfunction download(filename, text) {\n  var element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n}\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value + 1); // update the state to force render\n}\n\nfunction App() {\n  const [cells, setCells] = useState({\n    26:{16:1},\n    27:{17:1},\n    28:{15:1,16:1,17:1},\n  });\n  const [speed, setSpeed] = useState(200);\n  const [paused, setPaused] = useState(true);\n  //const [backupGrid, setBackupGrid] = useState(cells)\n  const forceUpdate = useForceUpdate();\n\n  const nextOrgGen = useCallback(() => {\n      function getSurroundingCoords(x,y){\n        x = parseInt(x);\n        y = parseInt(y);\n        return [\n            {\"x\":x-1,\"y\":y-1},\n            {\"x\":x-1,\"y\":y},\n            {\"x\":x-1,\"y\":y+1},\n            {\"x\":x,\"y\":y-1},\n            {\"x\":x,\"y\":y+1},\n            {\"x\":x+1,\"y\":y-1},\n            {\"x\":x+1,\"y\":y},\n            {\"x\":x+1,\"y\":y+1},\n        ];\n      }\n    \n      function getSurroundingAlive(x,y){\n          let alive = 0;\n          for(let pair of getSurroundingCoords(x,y)){\n              if(cells[pair[\"x\"]]&&cells[pair[\"x\"]][pair[\"y\"]]===1) alive++;\n          }\n          return alive;\n      }\n\n      let newCells = {};\n      for(let x in cells){\n          for(let y in cells[x]){\n              let alive = getSurroundingAlive(x,y);\n              if(alive===2||alive===3){\n                  newCells[x] = newCells[x]||{};\n                  newCells[x][y] = 1;\n              }\n              for(let pair of getSurroundingCoords(x,y)){\n                  if(getSurroundingAlive(pair[\"x\"],pair[\"y\"])===3){\n                      newCells[pair[\"x\"]] = newCells[pair[\"x\"]]||{};\n                      newCells[pair[\"x\"]][pair[\"y\"]] = 1;\n                  }\n              }\n          }\n      }\n\n      setCells(newCells);\n      //forceUpdate();\n  },[cells])\n\n  useEffect(() => {\n    if(!paused){\n      const interval = setInterval(() => {\n        nextOrgGen();\n      }, speed);\n      return () => clearInterval(interval);\n    }\n    \n  }, [nextOrgGen,speed,paused]);\n\n  const addOrgCell = (x,y) => {\n      let newCells = cells;\n      newCells[x]=newCells[x]||{};\n      newCells[x][y] = 1;\n      setCells(newCells);\n      forceUpdate()\n  }\n\n  const removeCell = (x,y) => {\n    let newCells = cells;\n    if(newCells[x]&&newCells[x][y]){\n      delete newCells[x][y];\n      if(JSON.stringify(newCells[x])===\"{}\") delete newCells[x];\n      setCells(newCells)\n    }\n    forceUpdate()\n  }\n\n  const nextButtonClick = (x,y,alive) => {\n    if(alive===\"alive\"){\n      removeCell(x,y);\n    }else{\n      addOrgCell(x,y);\n    }\n  }\n\n  const speedButtonClick = () => {\n    setSpeed(Math.floor(parseFloat(prompt(\"Enter speed in miliseconds\"))))\n  }\n\n  const pauseButtonClick = () => {\n    //paused&&\n    setPaused(!paused);\n  }\n\n  const exportCells = () => {\n    download(\"Cells.txt\",JSON.stringify(cells))\n  }\n\n  const importCells = () => {\n    var input = document.createElement('input');\n    input.type = 'file';\n    input.onchange = e => {\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      reader.readAsText(file,'UTF-8');\n      reader.onload = readerEvent => {\n        var content = readerEvent.target.result;\n        try{\n          JSON.parse(content)\n          setCells(JSON.parse(content));\n        }catch{\n          alert(\"This is not a grid file\");\n        }\n      }\n    };\n    input.click();\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid cells={cells} addCell={addOrgCell} removeCell={removeCell} click={nextButtonClick}/>\n      <button onClick={() => pauseButtonClick()}>{paused?\"Unp\":\"P\"}ause</button>\n      <button onClick={() => nextOrgGen()}>Next</button>\n      <button onClick={() => speedButtonClick()} id={\"speedButton\"}>Set Speed</button>\n      <button onClick={() => setCells({})}>Reset</button>\n      <button onClick={() => exportCells()}>Export Grid</button>\n      <button onClick={() => importCells()}>Import Grid</button>\n      <button onClick={() => console.log(cells)}>Log Cells</button>\n      {/*<div hidden={true} onLoad={() => window.setTimeout(nextOrgGen,1000)}></div>*/}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}